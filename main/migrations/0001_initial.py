# Generated by Django 3.0.4 on 2020-07-31 16:21

from django.db import migrations, models
import django.utils.timezone
import taggit.managers
import versatileimagefield.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0003_taggeditem_add_unique_index'),
    ]

    operations = [
        migrations.CreateModel(
            name='Advertisement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=150)),
                ('owner', models.CharField(max_length=150)),
                ('type', models.IntegerField(choices=[(1, 'Horizontal - 728x90'), (2, 'Vertical - 300x600'), (3, 'Video - 720x405'), (4, 'Youtube video - 720x405')], default=1)),
                ('image', versatileimagefield.fields.VersatileImageField(blank=True, help_text='Optional', null=True, upload_to='advertisement')),
                ('video', models.FileField(blank=True, help_text='Optional', null=True, upload_to='advertisement')),
                ('youtube', models.CharField(blank=True, help_text='Optional', max_length=150, null=True)),
                ('description', models.TextField(blank=True, help_text='Required only for videos and youtube ads', null=True)),
                ('link', models.URLField(blank=True, help_text='Required only for youtube video ads', null=True)),
                ('active', models.BooleanField(default=True)),
                ('posted', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-posted'],
            },
        ),
        migrations.CreateModel(
            name='Audio',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('file', models.FileField(upload_to='audio')),
                ('type', models.CharField(max_length=200)),
                ('active', models.BooleanField(default=True)),
                ('date', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='CustomerService',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('email', models.EmailField(max_length=200)),
                ('phone', models.IntegerField(blank=True, null=True, verbose_name='Phone Number')),
                ('content', models.TextField(verbose_name='Message')),
                ('date', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'verbose_name_plural': 'Customer Service',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='University',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('slug', models.SlugField(max_length=200, unique=True)),
            ],
            options={
                'verbose_name_plural': 'Universities',
            },
        ),
        migrations.CreateModel(
            name='Video',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('feature', models.TextField(blank=True, max_length=225, null=True)),
                ('description', models.TextField(blank=True, help_text='Optional', max_length=225, null=True)),
                ('link', models.CharField(max_length=225, verbose_name='Youtube Link')),
                ('active', models.BooleanField(default=True)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('artist', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
                ('university', models.ManyToManyField(blank=True, related_name='institutions', to='main.University')),
            ],
        ),
    ]
